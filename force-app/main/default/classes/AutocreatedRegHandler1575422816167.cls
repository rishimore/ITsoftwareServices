//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class AutocreatedRegHandler1575422816167 implements Auth.RegistrationHandler{
    String STUDENT_USER_PROFILE_NAME = 'Chatter Free User'; 
    String[] CUSTOMER_COMMUNITY_PROFILE_NAMES = new String[]{'Custom External Apps', 'Custom External Apps Login User'}; 
    
    //We do not want to auto create user so return false
    global boolean canCreateUser(Auth.UserData data) {
        return true;
    }
    
    global User createUser(Id portalId, Auth.UserData data){
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            return null;
        }
        System.debug('>>> In createUser. portalId: ' + portalId);
        System.debug('>>> Auth.UserData: ' + data + '<<<');
        if (data.attributeMap.containsKey('sfdc_networkid')) {
            User u = [SELECT Id 
                        FROM User 
                       WHERE email=:data.email 
                         and ProfileId in (select id from Profile where name in :CUSTOMER_COMMUNITY_PROFILE_NAMES )];

            return u;
        } else {
            User u = [SELECT Id 
                        FROM User 
                       WHERE email=:data.email and ProfileId in  (select id from Profile where name = :STUDENT_USER_PROFILE_NAME )];
            return u;
        }
    }
    
    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        System.debug('>>> In updateUser. portalId: ' + portalId);
        System.debug('>>> Auth.UserData: ' + data + '<<<');
    }
}